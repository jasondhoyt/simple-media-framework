// Copyright (c) 2024-present, Jason Hoyt
// Distributed under the MIT License (http://opensource.org/licenses/MIT)

#pragma once

#include <stdint.h>

/// @brief Initialize the SMF context.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_Init(void);

/// @brief Destroy the SMF context and all internal resources.
void SMF_Quit(void);

/// @brief Retrieve the last set error message for the SMF context.
/// @return The last error message that was set.
const char *SMF_GetError(void);

/// @brief Type that represents an error callback provided by the user.
typedef void (*SMF_ErrorCallback)(const char *msg, void *data);

/// @brief Set a custom callback to be called for each error generated by the system.
/// @param cb The callback to set (can be NULL to disable the callback).
/// @param data The custom user data (can be NULL) to provide to the callback function.
void SMF_SetErrorCallback(SMF_ErrorCallback cb, void *data);

/// @brief Set the desired window size in pixels.
/// @param w The width in pixels of the window drawing area.
/// @param h The height in pixels of the window drawing area.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_SetWindowSize(int w, int h);

/// @brief Set the rendering scaling factor.
/// @param scale 1 for no scaling (default), or any other positive for that level of scaling.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_SetWindowScale(int scale);

/// @brief Set the window title.
/// @param text The text to set the window title to.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_SetWindowTitle(const char *text);

/// @brief Create the window and display it with either built-in defaults or previously set parameters.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_CreateWindow(void);

/// @brief Type that represents a RGBA color.
typedef uint32_t SMF_Color;

#define SMF_RGB(R, G, B)                                                                                               \
    (((uint32_t)(R & 0xff) << 24) | ((uint32_t)(G & 0xff) << 16) | ((uint32_t)(B & 0xff) << 8) | 255)

#define SMF_RGBA(R, G, B, A)                                                                                           \
    (((uint32_t)(R & 0xff) << 24) | ((uint32_t)(G & 0xff) << 16) | ((uint32_t)(B & 0xff) << 8) | (uint32_t)(A & 0xff))

#define SMF_RED(Color) ((Color >> 24) & 0xff)
#define SMF_GREEN(Color) ((Color >> 16) & 0xff)
#define SMF_BLUE(Color) ((Color >> 8) & 0xff)
#define SMF_ALPHA(Color) (Color & 0xff)

/// @brief Type that represents a generic system handle to an internal resource.
typedef uint64_t SMF_Handle;

#define SMF_INVALID_HANDLE ((SMF_Handle)0)

/// @brief Load an image from the filesystem and return a unique handle to it.
/// @param path The path to the file to load the image from.
/// @return A valid handle for the image or SMF_INVALID_HANDLE for an error (see SMF_GetError).
SMF_Handle SMF_LoadImage(const char *path);

/// @brief Definition for a sub-image that is loaded from a larger image.
typedef struct SMF_ImageDef
{
    int x, y;
    int w, h;
} SMF_ImageDef;

/// @brief Load a set of images from a single image from the filesystem and return unique handles to them
/// @param path The path to the file to load the images from.
/// @param count The number of individual images to extract from the file.
/// @param defs The image definitions to load from the file.
/// @param handles An array of handles that are set for each image that was loaded.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_LoadImageSet(const char *path, int count, const SMF_ImageDef *defs, SMF_Handle *handles);

/// @brief Retrieve the size of a loaded image resource.
/// @param image Handle to the image resource.
/// @param x The x dimension to retrieve (may be NULL).
/// @param y The y dimension to retrieve (may be NULL).
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_GetImageSize(SMF_Handle image, int *w, int *h);

/// @brief Load a TrueType font from the filesystem at a given size.
/// @param path The path to the font file to load.
/// @param ttf_size The point size to load the font as.
/// @return A valid handle for the font or SMF_INVALID_HANDLE for an error (see SMF_GetError).
SMF_Handle SMF_LoadTrueTypeFont(const char *path, int ttf_size);

/// @brief Definition for a font glyph image for a bitmap font.
typedef struct SMF_GlyphDef
{
    uint32_t glyph;
    int x, y;
    int w;
} SMF_GlyphDef;

/// @brief Load a bitmap font from the filesystem by extracting individual glyph images.
/// @param path The path to the image file to load from.
/// @param glyph_count Number of glyphs to read from the image file.
/// @param glyphs The glyph definitions to load from the image.
/// @param height The height of the font in pixels.
/// @param x_adjust The adjustment factor in the x dimension for each rendering (0 means no adjustment).
/// @return A valid handle for the font or SMF_INVALID_HANDLE for an error (see SMF_GetError).
SMF_Handle SMF_LoadBitmapFont(const char *path, int glyph_count, const SMF_GlyphDef *glyphs, int height, int x_adjust);

/// @brief Retrieve the height in pixels of a font.
/// @param font Handle to the font resource.
/// @return A positive integer for the retrieved height, -1 for an error (see SMF_GetError).
int SMF_GetFontHeight(SMF_Handle font);

/// @brief Retrieve the fixed-width status of a font.
/// @param font Handle to the font resource.
/// @return 0 if the font is not fixed-width, 1 if the font is fixed-width, -1 for an error (see SMF_GetError).
int SMF_IsFontFixedWidth(SMF_Handle font);

/// @brief Check if a font contains a particular glyph.
/// @param font Handle to the font resource.
/// @param glyph The glyph to check for.
/// @return 0 if the font does not contain the glyph, 1 if the font does contain the glyph, -1 for an error (see
/// SMF_GetError).
int SMF_FontContainsGlyph(SMF_Handle font, uint32_t glyph);

/// @brief Retrieve a handle to the image representing a particular glyph in a font.
/// @param font Handle to the font resource.
/// @param glyph The glyph to retrieve the image for.
/// @return A valid handle for the image or SMF_INVALID_HANDLE for an error (see SMF_GetError).
SMF_Handle SMF_GetFontGlyphImage(SMF_Handle font, uint32_t glyph);

/// @brief Calculate the width in pixels for a string of text rendered in a font.
/// @param font Handle to the font resource.
/// @param text The text string to calculate the width for.
/// @return A positive (or 0) integer for the retrieved width, -1 for an error (see SMF_GetError).
int SMF_CalcTextWidth(SMF_Handle font, const char *text);

/// @brief Retrieve the current render output (taking into account scaling).
/// @param w The width in pixels of the render output (may be NULL).
/// @param h The height in pixels of the render output (may be NULL).
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_GetRenderSize(int *w, int *h);

/// @brief Present the buffered rendering commands to the window and reset the rendering state.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_RenderPresent(void);

/// @brief Set the drawing color for future rendering commands.
/// @param color The color to set.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_SetRenderColor(SMF_Color color);

/// @brief Render an image (tinted with the rendering color).
/// @param image Handle to the image resource.
/// @param x X position on the window to draw the image at.
/// @param y Y position on the window to draw the image at.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_RenderImage(SMF_Handle image, int x, int y);

/// @brief Render the glyph of a font (tinted with the rendering color).
/// @param font Handle to the font resource.
/// @param glyph Glyph index to render.
/// @param x X position on the window to draw the glyph image at.
/// @param y Y position on the window to draw the glyph image at.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_RenderGlyph(SMF_Handle font, uint32_t glyph, int x, int y);

/// @brief Render a string of text (tinted with the rendering color).
/// @param font Handle to the font resource.
/// @param text String of text to render.
/// @param x X position on the window to start rendering at.
/// @param y Y position on the window to start rendering at.
/// @return 0 for sucess, -1 for an error (see SMF_GetError).
int SMF_RenderText(SMF_Handle font, const char *text, int x, int y);

/// @brief Render a filled rectangle (tinted with the rendering color).
/// @param x X position on the window for the upper-left corner of the rectangle.
/// @param y Y position on the window for the upper-left corner of the rectangle.
/// @param w Width in pixels for the rectangle.
/// @param h Height in pixels for the rectangle.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_RenderFillRect(int x, int y, int w, int h);

/// @brief Set a clipping rectangle for future rendering commands.
/// @param x X position on the window for the upper-left corner of the clipping rectangle.
/// @param y Y position on the window for the upper-left corner of the clipping rectangle.
/// @param w Width in pixels for the clipping rectangle.
/// @param h Height in pixels for the clipping rectangle.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_SetRenderClipRect(int x, int y, int w, int h);

/// @brief Clear the clipping rectangle for future rendering commands.
/// @return 0 for success, -1 for an error (see SMF_GetError).
int SMF_ClearRenderClipRect(void);

/// @brief Type that represents supported mouse buttons.
typedef enum SMF_MouseButton
{
    SMF_MOUSE_BUTTON_LEFT = 1,
    SMF_MOUSE_BUTTON_RIGHT,
    SMF_MOUSE_BUTTON_MIDDLE
} SMF_MouseButton;

/// @brief Type that represents supported keyboard buttons.
typedef enum SMF_Key
{
    SMF_ESCAPE = 27,
    // ...
} SMF_Key;

/// @brief Type that represents supported keyboard modifiers (as bit masks).
typedef enum SMF_KeyMod
{
    SMF_KEY_MOD_SHIFT = 0x1,
    SMF_KEY_MOD_CTRL = 0x2,
    SMF_KEY_MOD_ALT = 0x4
} SMF_KeyMod;

/// @brief Type that describes a type of event.
typedef enum SMF_EventType
{
    SMF_EVENT_TYPE_QUIT = 1,
    SMF_EVENT_TYPE_LOST_FOCUS,
    SMF_EVENT_TYPE_GOT_FOCUS,
    SMF_EVENT_TYPE_MOUSE_ENTER,
    SMF_EVENT_TYPE_MOUSE_LEAVE,
    SMF_EVENT_TYPE_MOUSE_MOVE,
    SMF_EVENT_TYPE_MOUSE_PRESS,
    SMF_EVENT_TYPE_MOUSE_RELEASE,
    SMF_EVENT_TYPE_MOUSE_CLICK,
    SMF_EVENT_TYPE_MOUSE_DOUBLE_CLICK,
    SMF_EVENT_TYPE_MOUSE_SCROLL,
    SMF_EVENT_TYPE_KEY_DOWN,
    SMF_EVENT_TYPE_KEY_UP,
    SMF_EVENT_TYPE_TEXT_INPUT
} SMF_EventType;

/// @brief Type that represents a single event.
typedef struct SMF_Event
{
    SMF_EventType type;
    union
    {
        struct
        {
            int x, y;
        } mouse_enter;
        struct
        {
            int x, y;
        } mouse_move;
        struct
        {
            int x, y;
            SMF_MouseButton button;
        } mouse_button;
        struct
        {
            int x, y;
            SMF_MouseButton button;
        } mouse_click;
        struct
        {
            int x, y;
            int scroll_x, scroll_y;
        } mouse_scroll;
        struct
        {
            SMF_Key key;
            SMF_KeyMod mods;
        } key;
        struct
        {
            char text[32];
        } text_input;
    };
} SMF_Event;

/// @brief Poll for the next event and return if there was an event or not.
/// @param event The event information to fill out if an event was processed.
/// @return 0 if no event was processed, 1 if an event was processed, -1 for an error (see SMF_GetError).
int SMF_PollEvent(SMF_Event *event);

/// @brief Sleep for a specified amount of time.
/// @param milliseconds Number of milliseconds to sleep for.
void SMF_Sleep(int milliseconds);

/// @brief Retrieve an incrementing timer in milliseconds.
/// @return Number of milliseconds from some arbitrary point in time.
uint64_t SMF_GetTicks(void);
